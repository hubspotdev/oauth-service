# HubSpot Public App OAuth Service

## What this project does

This OAuth Service repository is a stand-alone service for handling the OAuth 2.0 processes needed for a HubSpot integration.

## Why is this project useful:

This project demonstrates how to:

 - Set up the scopes needed for an integration

 - Create a PostgreSQL database to store OAuth refresh and access tokens

 - Go through the initial OAuth installation

 - Generate the initial access token, and refresh access tokens after they expire

 - Provide token access to other services via a dedicated network

## URLs:

 - **GET /install**: Displays a clickable link to the OAuth authentication URL for users to connect the app to HubSpot. This should be the first step a new user or client performs to initiate the OAuth 2.0 authorization process.

 - **GET /oauth-callback**: Handles the redirect from the HubSpot OAuth authorization process. Processes the authorization code to obtain an access token and refresh token for the HubSpot user.

  - **GET /api/get-install-url**: Returns the OAuth authentication URL as a plain text string. Can be used by other services to get the install URL.

  - **GET /api/get-token**: Returns the token for a given local customerId. Requires a `customerId=` query parameter.

## Getting started with the project:

### Using Docker (Recommended):

1. Clone the repo

2. If you haven't done so yet, please make sure to install [Docker](https://www.docker.com/get-started/) on your local environment.

3. Create the `.env` file (see examples in the [.env.example](./.env.example) file)

4. Start the service:
```bash
# For development:
docker-compose up --build

# For production:
docker-compose -f docker-compose.yml up --build
```

5. Initialize OAuth token:
   - Visit `http://localhost:3001/install`
   - Click the authorization link
   - Complete the HubSpot OAuth flow
   - A token will be stored with customerId="1"

### Connecting Other Services

To connect another service to the OAuth service:

1. Add these networks to your service's docker-compose.yml:
```yaml
networks:
  app-network:
    driver: bridge
  oauth-service_oauth-network:
    external: true
```

2. Add the network and configuration to your service:
```yaml
services:
  app:
    env_file:
      - .env               # Contains OAUTH_SERVICE_URL=http://app:3001
    networks:
      - app-network
      - oauth-service_oauth-network
```

3. Configure your database to use a different port:
```yaml
  db:
    ports:
      - "5433:5432"    # Different from OAuth service's 5432
```

4. Important Network Notes:
   - The `oauth-service_oauth-network` must be created before starting your service
   - You can create it by running `docker network create oauth-service_oauth-network`
   - This network allows secure communication between your service and the OAuth service
   - The network name must match exactly: `oauth-service_oauth-network`

5. Add code to access tokens from your service, example:
```typescript
const OAUTH_SERVICE_URL = process.env.OAUTH_SERVICE_URL || 'http://app:3001';

export async function getHubSpotToken(customerId: string): Promise<string> {
  try {
    const response = await fetch(`${OAUTH_SERVICE_URL}/api/get-token?customerId=${customerId}`);
    const data = await response.json();
    if (data.accessToken) {
      return data.accessToken;
    }
    throw new Error(data.errorMessage || 'Failed to get access token');
  } catch (error) {
    console.error('Failed to get token:', error);
    throw error;
  }
}
```


## Available Scripts

### Docker Commands
- `docker-compose up --build` - Build and start all services in development mode
- `docker-compose -f docker-compose.yml up --build` - Build and start all services in production mode
- `docker-compose down` - Stop all services
- `docker-compose down -v` - Stop all services and remove volumes (resets database)
- `docker-compose logs -f` - Watch logs in real-time

### Application Commands
These commands can be run inside the Docker container using `docker-compose exec app`:
- `docker-compose exec app npm run dev` - Start development server with hot reloading
- `docker-compose exec app npm run build` - Build TypeScript files
- `docker-compose exec app npm run prod` - Run production server
- `docker-compose exec app npm run db-init` - Initialize database schema
- `docker-compose exec app npm run seed` - Run database seeding

### Database Commands
- `docker-compose exec db psql -U postgres -d oauth_service` - Access PostgreSQL CLI
- `docker-compose exec app npx prisma studio` - Open Prisma Studio (database GUI)
- `docker-compose exec app npx prisma generate` - Generate Prisma client
- `docker-compose exec app npx prisma db push` - Push schema changes to database

## Dependencies

All dependencies are automatically handled by Docker. However, for reference, here are the key packages used:

### Core Dependencies
These are included in the Docker container:
- `@hubspot/api-client` (^6.0.1) - HubSpot API integration
- `@prisma/client` (^3.14.0) - Database ORM
- `express` (^4.17.1) - Web framework
- `dotenv` (^16.0.1) - Environment configuration
- `axios` (^0.27.2) - HTTP client
- `form-data` (^4.0.0) - Form data handling

### Development Dependencies
These are also included in the Docker environment:
- `typescript` (^4.1.3) - Programming language
- `prisma` (^4.1.0) - Database toolkit
- `nodemon` (^2.0.7) - Development server
- `ts-node` (^10.9.1) - TypeScript execution
- `prettier-plugin-prisma` (^3.14.0) - Prisma file formatting
- `@types/express` (^4.17.11) - Express TypeScript definitions
- `@types/node` (^14.14.22) - Node.js TypeScript definitions

## Where to get help?

If you encounter any bugs or issues, please report them by opening a GitHub issue. For feedback or suggestions for new code examples, we encourage you to use this [form](https://survey.hsforms.com/1RT0f09LSTHuflzNtMbr2jA96it).

## Who maintains and contributes to this project

Various teams at HubSpot that focus on developer experience and app marketplace quality maintain and contribute to this project. In particular, this project was made possible by @therealdadams, @rahmona-henry, @zman81988, @natalijabujevic0708, and @zradford

## License

MIT
